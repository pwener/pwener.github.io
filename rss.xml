<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog do Wener]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 13 Jan 2023 17:30:51 GMT</lastBuildDate><item><title><![CDATA[Miojização da TI]]></title><description><![CDATA[Vocês não estudam cálculo porque vão usar isso diariamente no trabalho, mas porque isso aprimora sua capacidade de raciocínio. Algum…]]></description><link>null/miojizacao-da-ti/</link><guid isPermaLink="false">null/miojizacao-da-ti/</guid><pubDate>Tue, 05 Oct 2021 02:53:29 GMT</pubDate><content:encoded>&lt;!--
![linkedin](./image.png)

Esses dias li esse post viral no Linkedin, a princípio veio um incômodo, que sucedeu algumas reflexões e conversas com conhecidos...
Eu pensava que, no geral, esse era um critério muito ruim para uma vaga também, quer dizer, existem tantos aspectos importantes num código: manutenibilidade, testes, extensibilidade, consistência, simplicidade. O que um teste de algoritmos poderia avaliar de tudo isso? Um maratonista é melhor programador? Solucionar desafios e avaliar complexidade de código são sempre fundamentais?

### Qual o profissional você quer ser?

Uma das coisas importantes na análise de requisitos que o mercado praticamente desconhece é a priorização de requisitos não funcionais. Nessa análise é possível ver tanto qual vai ser a demanda de competências/especialidades, quanto os aspectos mais importantes para o sucesso do projeto. Exemplo: Para um aplicativo bancário, quais dentre os critérios abaixo são mais importantes para o **usuário**?

    - Eficiência
    - Usabilidade
    - Segurança
    - Integridade

Agora pense nesses mesmos requisitos para um e-commerce. Não é difícil classificar certo? Sabemos que minimamente todos esses critérios devem ser atendidos, mas um Banco sem segurança e integridade nos seus produtos perderia credibilidade e provavelmente muito dinheiro a cada falha. Já um e-commerce, por outro lado, caso os usuários não consigam navegar com facilidade, a taxa de evasão seria crescente, o que é tolerável para um é inaceitável para outro... Nesse sentido cabe a questão: Qual problema que te atrai mais?

Não é menos ser um profissional focado em resolver problemas de usabilidade, especialista em alguma tecnologia, ter viés de segurança ou mesmo só ser um &quot;faz-tudo&quot;, mas num cenário que se exige um perfil que saiba otimizar o desempenho de um software onde cada milisegundo faz toda diferença, talvez faça sentido uma vaga ter uma prova de algoritmos certo?

Posso ir além, qual seria o critério mais justo de avaliação de duas pessoas com backgrounds parecidos para uma vaga? Minha resposta é: a capacidade de absorver e resolver problemas. Devemos concordar que a análise e implementação de algoritmos é uma competência extremamente válida para qualquer cargo não trivial. - Ora, mas o que é um cargo não trivial? Qualquer cargo que necessite mais do que a capacidade de usar tecnologias. De novo, não estou reduzindo um cargo &quot;não trivial&quot;, muitas vezes fazer CRUD é o que a pessoa se sente bem fazendo, e não há nada de errado com isso. Mas em contrapartida, ela não pode esperar que se encaixe em uma vaga que isso não é suficiente. --&gt;
&lt;blockquote&gt;
&lt;p&gt;Vocês não estudam cálculo porque vão usar isso diariamente no trabalho, mas porque isso aprimora sua capacidade de raciocínio.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Algum professor disse isso na faculdade, e me marcou. Algoritmos são a mesma coisa, nem sempre é claro como aquilo pode ajudar, para muitos contextos talvez não seja claramente útil, mas no fim isso vai te ajudar. Não é detalhe. A capacidade de analisar e resolver problemas é a mesma exercitada. Mas isso é justamente o contrário ao que a área de TI tem se tornado certo? Uma grande &lt;a href=&quot;https://www.gazetadopovo.com.br/vida-e-cidadania/e-preciso-estar-disponivel-para-o-aprendizado-continuo-diz-cortella-6dkf1o47z4o1sw2xbmdstg296/&quot;&gt;miojização&lt;/a&gt; do conhecimento, que supervaloriza resultados rápidos através de habilidades técnicas, subestimando a necessidade de fundamentação.&lt;/p&gt;
&lt;p&gt;Não parece ser mais tão importante no mercado, para grande maioria das vagas, ter um conhecimento aprofundado em tópicos fundamentais como: algoritmos, sistemas operacionais, redes ou arquitetura de software. Nem mesmo ter capacidade de resolver problemas. Basta ter experiência ou afinidade em uma tecnologia X ou Y… O grande problema disso é que as resoluções costumam ser tendenciosas e terceirizadas para tecnologias.&lt;/p&gt;
&lt;p&gt;Terceirizar uma solução significa confiar que algo pronto vai fazer ou facilitar a vida do desenvolvedor(menos trabalho), e do cliente(satisfeito em pagar/esperar menos, num primeiro momento). Porque desenvolver um sistema com uma solução sólida, eficiente, precisa no meu entendimento, de uma compreensão de conceitos, e da competência exercitada de um solucionador, e não de um profissional que aplica tecnologias que se encaixam no problema, fazendo parecer bonito. Desso último saem muitas pérolas como já presenciei: uso de http para tudo, aplicação lenta com trecho de código em O(n!), ferramenta de concorrência sendo utilizada para um problema que não existia, uso de bibliotecas para problemas simples, e por aí vai.&lt;/p&gt;
&lt;p&gt;O fim disso não sei, talvez vai existir uma segunda crise do software, talvez teremos em algum momento uma filtragem de profissionais, o que eu poderia dizer é que não vai deixar de ser importante conhecer os fundamentos. Bato nesta tecla para colegas que querem entrar no mercado, &lt;strong&gt;esse é um ponto diferencial&lt;/strong&gt;. Enfim, não ache ruim quando te aplicam uma prova técnica, quem sabe o contratante sabe exatamente o que quer.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Desenvolvimento de Software não é artesanato]]></title><description><![CDATA[“Software vem sendo feito de forma artesanal. Era mais ou menos isso que meu coorientador dizia nas aulas ou em outras
conversas no qual ele…]]></description><link>null/desenvolvimento-software-artesanal/</link><guid isPermaLink="false">null/desenvolvimento-software-artesanal/</guid><pubDate>Wed, 18 Jul 2018 10:26:00 GMT</pubDate><content:encoded>&lt;h3&gt;“Software vem sendo feito de forma artesanal.&lt;/h3&gt;
&lt;p&gt;Era mais ou menos isso que meu coorientador dizia nas aulas ou em outras
conversas no qual ele reforçava o quanto o mercado de software era defasado. Eu
achava ter entendido a dimensão dessa fala, mas cada dia me surpreendo o quanto
essa ideia é viva no mercado, e achei justo discursar mais sobre isso.&lt;/p&gt;
&lt;p&gt;É natural que alguém que não seja da área, veja o desenvolvimento de software
como algo trivial. “É só criar essa interface”, “Não deve dar trabalho não”,
“Faz ai, qualquer dúvida pode me perguntar”. São algumas das frases que estamos
acostumados a ouvir. O problema maior começa quando os desenvolvedores também
acreditam que pra satisfazer as necessidades dos seus clientes, basta
simplesmente &lt;strong&gt;por a mão na massa&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Um dia essa foi a única forma de desenvolver software. Conforme explica
Sommerville, os sistemas de software não eram grandes e complexos, portanto não
demandavam as técnicas e métodos que surgiram a partir da chamada &lt;strong&gt;crise do
software&lt;/strong&gt;. Quando o hardware começou a permitir o que até então parecia
inviável, o mercado sentiu uma pressão que resultou nos inúmeros métodos de
desenvolvimento que conhecemos hoje, alguns dos quais enchem as bocas dos
marketeiros que vendem a ideia do desenvolvimento &lt;strong&gt;perfeito&lt;/strong&gt; de software.&lt;/p&gt;
&lt;p&gt;O que ninguém esperava, é que muitos desses métodos seriam usados de forma tão
deformada, escondendo com encanto um desenvolvimento artesanal, sob o
pretexto de um compensador processo comunicativo, colaborativo e adaptativo, um
autêntico mito da &lt;a href=&quot;http://www.cs.nott.ac.uk/~pszcah/G51ISS/Documents/NoSilverBullet.html&quot;&gt;bala de
prata&lt;/a&gt; do
desenvolvimento de software. Eu não sou o primeiro a dizer isso, o ousado
artigo &lt;a href=&quot;https://www.linkedin.com/pulse/agile-dead-matthew-kern/&quot;&gt;Agile is Dead&lt;/a&gt;
reporta uma onda de discurssão nesse sentido.&lt;/p&gt;
&lt;p&gt;O que tenho observado, é que a confiança demasiada nos valores ágeis gera uma
certa negligência nas atividades centrais do desenvolvimento de software, como
por exemplo, análise e levantamento de requisitos, desenho de software e testes. Tem uma boa
razão pra isso. Por exemplo, é mais fácil acusar falha de comunicação do que perceber que o
problema de não estar correspondendo as expectativas do cliente é por uma falha
ou descaso total com os requisitos de software.&lt;/p&gt;
&lt;h3&gt;“Ok, mas qual o contrário disso?&lt;/h3&gt;
&lt;p&gt;Por motivos óbvios, prédios, aviões ou mesmo eletrodomésticos, não são feitos sem
um trabalho de engenharia. Sem engenharia esses projetos não seriam confiáveis,
teriam uma qualidade inferior com preços e prazos superiores, a
&lt;a href=&quot;https://www.bbc.com/portuguese/noticias/2014/05/140530_erros_ciencia_engenharia_rb&quot;&gt;história&lt;/a&gt; tem
inúmeras provas da falta ou falha de engenharia. Com software não é
&lt;a href=&quot;https://www.bbc.com/portuguese/noticias/2015/05/150513_vert_fut_bug_digital_ml&quot;&gt;diferente&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Não existe outra saída, projetos de qualidade exigem Engenharia,
a acadêmia e os gigantes do mercado já sabem disso. Outras empresas nadam a deriva
a procura de produzir software barato, com filosofias ou métodos “inovadores”.
O que para pequenos projetos pode dar certo, ao passo que se aumenta a complexidade,
pode se tornar um pesadelo.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[Espero que essa seja a minha primeira postagem de muitas, e nada mais justo do que começar escrevendo sobre as minhas motivações para ter…]]></description><link>null/hello-world/</link><guid isPermaLink="false">null/hello-world/</guid><pubDate>Sun, 24 Dec 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;Espero que essa seja a minha primeira postagem de muitas, e nada mais justo do que começar escrevendo sobre as minhas motivações para ter esse espaço. Bom, nos últimos anos se tornou muito fácil publicar conteúdo na internet, plataformas &lt;em&gt;blog&lt;/em&gt; e redes sociais democratizaram a voz da “verdade”. Dentre tanto conteúdo, há muitas opiniões não especialistas, que em vez de ajudar em qualquer coisa (que não seja massagear o ego de quem publica), apenas confunde ou desinforma os leitores que não possuem critérios para absorver informação. Logo, o primeiro princípio deste &lt;em&gt;blog&lt;/em&gt;, é que não será publicado nada além do que é a minha área de formação.&lt;/p&gt;
&lt;p&gt;Vale também ressaltar, que os motivos que me levaram a manter esse projeto são os mesmos que me levam a ser um entusiasta de software livre, algo que alguns não compreendem e erroneamente rotulam como uma pretensão meramente altruísta, é na verdade, concordando em partes com o &lt;em&gt;post&lt;/em&gt; do &lt;a href=&quot;http://www.akitaonrails.com/2016/04/22/off-topic-software-livre-exercicio-de-capitalismo&quot;&gt;Akita&lt;/a&gt;, uma estratégia de carreira, pois faço isso como uma forma de me beneficiar enquanto contribuo com algo que gosto, fazendo também parte de algo maior. Nesse aspecto, com esse espaço almejo atingir além do mundo &lt;em&gt;opensource&lt;/em&gt;. É um esforço o qual disserto sobre o mundo de desenvolvimento de software como um todo, as vezes no campo das ideias, as vezes no campo mais prático.&lt;/p&gt;
&lt;p&gt;Acredito que muitos desenvolvedores deveriam ter um espaço assim. Lembro-me de uma ocasião que estava mostrando alguns códigos para um colega que entusiasmado afirmou: - Cara, você deveria compartilhar isso. Na verdade era algo que já estava público, no meu Github, porém, se eu não falasse, ele nunca saberia. Por isso existe uma necessidade de se dissertar sobre essas ideias e trabalhos para que se tornem compartilháveis. Isso acontece com experimentos, discussões, reflexões no trabalho ou mesmo debaixo do chuveiro, afinal as epifanias não escolhem lugar.&lt;/p&gt;
&lt;p&gt;Portanto, sinta-se à vontade para ler os conteúdos conseguintes. Espero de verdade que possa contribuir de alguma forma com a concepção do leitor sobre o desenvolvimento de software, até mesmo bater um papo com alguém que ocasionalmente tenha algum comentário a fazer. Enfim, seja bem vindo!&lt;/p&gt;</content:encoded></item></channel></rss>