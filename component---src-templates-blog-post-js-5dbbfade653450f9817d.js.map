{"version":3,"file":"component---src-templates-blog-post-js-5dbbfade653450f9817d.js","mappings":"gJAgDA,IA1CY,WAAO,IAADA,EAiBVC,EAA+B,QAAzBD,GAhBCE,EAAAA,EAAAA,gBAAe,cAgBRC,KAAKC,oBAAY,IAAAJ,OAAA,EAAtBA,EAAwBC,OAEvC,OACEI,EAAAA,cAAA,OAAKC,UAAU,OACbD,EAAAA,cAACE,EAAAA,EAAW,CACVD,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBAAiBC,YAAAC,EAAA,SAEtBf,aAAM,EAANA,EAAQgB,OACPZ,EAAAA,cAAA,SACGJ,aAAM,EAANA,EAAQiB,QACTb,EAAAA,cAAA,WAAM,eACMA,EAAAA,cAAA,cAASJ,EAAOgB,OAKtC,C,kFCoBA,UA3DyB,SAAHE,GAA4B,IAADnB,EAArBoB,EAAID,EAAJC,KAAMC,EAAQF,EAARE,SAC1BC,EAAOF,EAAKG,eACZC,GAAkC,QAAtBxB,EAAAoB,EAAKjB,KAAKC,oBAAY,IAAAJ,OAAA,EAAtBA,EAAwByB,QAAK,QACvCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACEtB,EAAAA,cAACuB,EAAAA,EAAM,CAACP,SAAUA,EAAUI,MAAOD,GACjCnB,EAAAA,cAACwB,EAAAA,EAAG,CACFJ,MAAOH,EAAKQ,YAAYL,MACxBM,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpD3B,EAAAA,cAAA,WACEC,UAAU,YACV2B,WAAS,EACTC,SAAS,6BAET7B,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAI8B,SAAS,YAAYb,EAAKQ,YAAYL,OAC1CpB,EAAAA,cAAA,SAAIiB,EAAKQ,YAAYM,OAEvB/B,EAAAA,cAAA,WACEgC,wBAAyB,CAAEC,OAAQhB,EAAKiB,MACxCJ,SAAS,gBAEX9B,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAACmC,EAAAA,EAAG,QAGRnC,EAAAA,cAAA,OAAKC,UAAU,iBACbD,EAAAA,cAAA,MACEoC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGXzC,EAAAA,cAAA,UACGqB,GACCrB,EAAAA,cAAC0C,EAAAA,KAAI,CAACC,GAAItB,EAASuB,OAAOC,KAAMC,IAAI,QAAO,KACtCzB,EAASI,YAAYL,QAI9BpB,EAAAA,cAAA,UACGsB,GACCtB,EAAAA,cAAC0C,EAAAA,KAAI,CAACC,GAAIrB,EAAKsB,OAAOC,KAAMC,IAAI,QAC7BxB,EAAKG,YAAYL,MAAM,SAQxC,C","sources":["webpack://pwener-blog/./src/components/bio.tsx","webpack://pwener-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\n\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          {author?.summary}\n          <br />\n          Escrito por <strong>{author.name}</strong>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["_data$site$siteMetada","author","useStaticQuery","site","siteMetadata","React","className","StaticImage","layout","formats","src","width","height","quality","alt","__imageData","require","name","summary","_ref","data","location","post","markdownRemark","siteTitle","title","previous","next","Layout","Seo","frontmatter","description","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}