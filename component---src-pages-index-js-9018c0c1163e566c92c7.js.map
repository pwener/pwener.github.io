{"version":3,"file":"component---src-pages-index-js-9018c0c1163e566c92c7.js","mappings":"gJAgDA,IA1CY,WAAO,IAADA,EAiBVC,EAA+B,QAAzBD,GAhBCE,EAAAA,EAAAA,gBAAe,cAgBRC,KAAKC,oBAAY,IAAAJ,OAAA,EAAtBA,EAAwBC,OAEvC,OACEI,EAAAA,cAAA,OAAKC,UAAU,OACbD,EAAAA,cAACE,EAAAA,EAAW,CACVD,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBAAiBC,YAAAC,EAAA,SAEtBf,aAAM,EAANA,EAAQgB,OACPZ,EAAAA,cAAA,SACGJ,aAAM,EAANA,EAAQiB,QACTb,EAAAA,cAAA,WAAM,eACMA,EAAAA,cAAA,cAASJ,EAAOgB,OAKtC,C,kFCMA,UA5CkB,SAAHE,GAA4B,IAADnB,EAArBoB,EAAID,EAAJC,KAAMC,EAAQF,EAARE,SACnBC,GAAkC,QAAtBtB,EAAAoB,EAAKjB,KAAKC,oBAAY,IAAAJ,OAAA,EAAtBA,EAAwBuB,QAAK,QACzCC,EAAQJ,EAAKK,kBAAkBC,MAErC,OACErB,EAAAA,cAACsB,EAAAA,EAAM,CAACN,SAAUA,EAAUE,MAAOD,GACjCjB,EAAAA,cAACuB,EAAAA,EAAG,CAACL,MAAM,qBACXlB,EAAAA,cAACwB,EAAAA,EAAG,MACJxB,EAAAA,cAAA,MAAIyB,MAAO,CAAEC,UAAU,SACpBP,EAAMQ,KAAI,SAAAC,GACT,IAAMV,EAAQU,EAAKC,YAAYX,OAASU,EAAKE,OAAOC,KAEpD,OACE/B,EAAAA,cAAA,MAAIgC,IAAKJ,EAAKE,OAAOC,MACnB/B,EAAAA,cAAA,WACEC,UAAU,iBACVgC,WAAS,EACTC,SAAS,6BAETlC,EAAAA,cAAA,cACEA,EAAAA,cAAA,UACEA,EAAAA,cAACmC,EAAAA,KAAI,CAACC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnCrC,EAAAA,cAAA,QAAMqC,SAAS,YAAYnB,KAG/BlB,EAAAA,cAAA,aAAQ4B,EAAKC,YAAYS,OAE3BtC,EAAAA,cAAA,eACEA,EAAAA,cAAA,KACEuC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,kBAMrB,KAIR,C","sources":["webpack://pwener-blog/./src/components/bio.tsx","webpack://pwener-blog/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\n\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          {author?.summary}\n          <br />\n          Escrito por <strong>{author.name}</strong>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\n\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"pwener.github.io\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["_data$site$siteMetada","author","useStaticQuery","site","siteMetadata","React","className","StaticImage","layout","formats","src","width","height","quality","alt","__imageData","require","name","summary","_ref","data","location","siteTitle","title","posts","allMarkdownRemark","nodes","Layout","Seo","Bio","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}